import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.io.IOException;
import java.util.*;

public class PolynomialInterpolation {
    public static void main(String[] args) {
        try {
           
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(new File("testcase.json")); 

            int n = rootNode.get("keys").get("n").asInt();
            int k = rootNode.get("keys").get("k").asInt();

            List<Integer> xValues = new ArrayList<>();
            List<Integer> yValues = new ArrayList<>();

            
            Iterator<String> keys = rootNode.fieldNames();
            while (keys.hasNext()) {
                String key = keys.next();
                if (key.equals("keys")) continue; 

                JsonNode node = rootNode.get(key);
                int base = node.get("base").asInt();
                String value = node.get("value").asText();

                xValues.add(Integer.parseInt(key)); 
                yValues.add(decodeValue(value, base));
            }

            
            List<Integer> sortedIndices = new ArrayList<>();
            for (int i = 0; i < xValues.size(); i++) sortedIndices.add(i);
            sortedIndices.sort(Comparator.comparingInt(xValues::get));

            List<Integer> sortedX = new ArrayList<>();
            List<Integer> sortedY = new ArrayList<>();
            for (int index : sortedIndices) {
                sortedX.add(xValues.get(index));
                sortedY.add(yValues.get(index));
            }

            
            double secretC = lagrangeInterpolation(sortedX.subList(0, k), sortedY.subList(0, k));

            System.out.println("The secret (constant term 'c') is: " + secretC);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    
    public static int decodeValue(String value, int base) {
        return Integer.parseInt(value, base);
    }

    
    public static double lagrangeInterpolation(List<Integer> x, List<Integer> y) {
        int n = x.size();
        double result = 0.0;

        for (int i = 0; i < n; i++) {
            double term = y.get(i);
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    term *= (0.0 - x.get(j)) / (x.get(i) - x.get(j));
                }
            }
            result += term;
        }

        return result;
    }
}